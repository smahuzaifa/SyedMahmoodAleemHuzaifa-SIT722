name: Deploying to production

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read
  id-token: write

env:
  NS: prod
  IMAGE_TAG: prod-${{ github.sha }}

jobs:
  build_and_push_prod_images:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR login
        run: az acr login --name ${{ secrets.ACR_NAME }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push product-service
        uses: docker/build-push-action@v6
        with:
          context: ./backend/product_service
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/ecomm-product-service:${{ env.IMAGE_TAG }}

      - name: Build & push order-service
        uses: docker/build-push-action@v6
        with:
          context: ./backend/order_service
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/ecomm-order-service:${{ env.IMAGE_TAG }}

      - name: Build & push customer-service
        uses: docker/build-push-action@v6
        with:
          context: ./backend/customer_service
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/ecomm-customer-service:${{ env.IMAGE_TAG }}

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/ecomm-frontend:${{ env.IMAGE_TAG }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build_and_push_prod_images]
    environment:
      name: production

    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # fail-fast sanity check so you don't chase "ResourceNotFound"
      - name: Preflight â€“ verify AKS exists
        run: |
          set -euo pipefail
          az aks show -g "${{ secrets.AKS_RESOURCE_GROUP }}" -n "${{ secrets.AKS_CLUSTER_NAME }}" 1>/dev/null

      - name: Get AKS credentials
        run: az aks get-credentials -g ${{ secrets.AKS_RESOURCE_GROUP }} -n ${{ secrets.AKS_CLUSTER_NAME }} --admin --overwrite-existing

      - name: Ensure prod namespace exists + apply manifests
        run: |
          set -euo pipefail
          kubectl get ns $NS || kubectl create namespace $NS

          # base
          kubectl -n $NS apply -f k8s/secrets.yaml
          kubectl -n $NS apply -f k8s/configmaps.yaml

          # infra first (all three DBs + rabbitmq)
          kubectl -n $NS apply -f k8s/product-db.yaml
          kubectl -n $NS apply -f k8s/order-db.yaml
          kubectl -n $NS apply -f k8s/customer-db.yaml
          kubectl -n $NS apply -f k8s/rabbitmq.yaml

          # services + frontend
          kubectl -n $NS apply -f k8s/product-service.yaml
          kubectl -n $NS apply -f k8s/order-service.yaml
          kubectl -n $NS apply -f k8s/customer-service.yaml
          kubectl -n $NS apply -f k8s/frontend.yaml

      - name: Point deployments to PROD images
        env:
          REG: ${{ secrets.ACR_LOGIN_SERVER }}
        run: |
          set -euo pipefail
          kubectl -n $NS set image deployment/product-service-w08e1   product-service=$REG/ecomm-product-service:${IMAGE_TAG}
          kubectl -n $NS set image deployment/order-service-w08e1     order-service=$REG/ecomm-order-service:${IMAGE_TAG}
          kubectl -n $NS set image deployment/customer-service-w08e1  customer-service=$REG/ecomm-customer-service:${IMAGE_TAG}
          # your deployment is named "frontend" (not frontend-w08e1)
          kubectl -n $NS set image deployment/frontend                frontend=$REG/ecomm-frontend:${IMAGE_TAG}

      - name: Wait for rollout
        run: |
          set -euo pipefail
          kubectl -n $NS rollout status deployment/product-service-w08e1  --timeout=300s
          kubectl -n $NS rollout status deployment/order-service-w08e1    --timeout=300s
          kubectl -n $NS rollout status deployment/customer-service-w08e1 --timeout=300s
          kubectl -n $NS rollout status deployment/frontend               --timeout=300s
