name: CI â€“ tests then ACR push (branch=testing)

on:
  push:
    branches: [ "testing" ]

permissions:
  contents: read
  id-token: write

env:
  PYTHON_VERSION: "3.11"
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  PRODUCT_DB: products
  ORDER_DB: orders
  CUSTOMER_DB: customers

jobs:
  test:
    name: "Run pytest for all services"
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U $POSTGRES_USER"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    steps:
      - uses: actions/checkout@v4

      - name: Wait for Postgres & create DBs
        run: |
          for i in {1..30}; do
            (echo > /dev/tcp/127.0.0.1/5432) >/dev/null 2>&1 && break
            echo "Waiting for postgres ($i/30)..." && sleep 2
          done
          sudo apt-get update -y && sudo apt-get install -y postgresql-client
          export PGPASSWORD=${POSTGRES_PASSWORD}
          createdb -h 127.0.0.1 -U ${POSTGRES_USER} ${PRODUCT_DB} || true
          createdb -h 127.0.0.1 -U ${POSTGRES_USER} ${ORDER_DB} || true
          createdb -h 127.0.0.1 -U ${POSTGRES_USER} ${CUSTOMER_DB} || true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install test deps (customer)
        working-directory: backend/customer_service
        run: pip install -r requirements-dev.txt
      - name: Pytest (customer)
        working-directory: backend/customer_service
        env:
          POSTGRES_HOST: 127.0.0.1
          POSTGRES_PORT: 5432
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.CUSTOMER_DB }}
        run: pytest -q

      - name: Install test deps (product)
        working-directory: backend/product_service
        run: pip install -r requirements-dev.txt
      - name: Pytest (product)
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: 127.0.0.1
          POSTGRES_PORT: 5432
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.PRODUCT_DB }}
        run: pytest -q

      - name: Install test deps (order)
        working-directory: backend/order_service
        run: pip install -r requirements-dev.txt
      - name: Pytest (order)
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: 127.0.0.1
          POSTGRES_PORT: 5432
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.ORDER_DB }}
        run: pytest -q

  build_and_push:
    name: "Build & push images to ACR (only if tests passed)"
    runs-on: ubuntu-latest
    needs: [test]

    env:
      IMAGE_TAG: testing-${{ github.sha }}
      REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR login
        run: az acr login --name ${{ secrets.ACR_NAME }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push product-service
        uses: docker/build-push-action@v6
        with:
          context: ./backend/product_service
          push: true
          tags: ${{ env.REGISTRY }}/ecomm-product-service:${{ env.IMAGE_TAG }}

      - name: Build & push order-service
        uses: docker/build-push-action@v6
        with:
          context: ./backend/order_service
          push: true
          tags: ${{ env.REGISTRY }}/ecomm-order-service:${{ env.IMAGE_TAG }}

      - name: Build & push customer-service
        uses: docker/build-push-action@v6
        with:
          context: ./backend/customer_service
          push: true
          tags: ${{ env.REGISTRY }}/ecomm-customer-service:${{ env.IMAGE_TAG }}

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: ${{ env.REGISTRY }}/ecomm-frontend:${{ env.IMAGE_TAG }}

      - name: Expose image metadata for next jobs
        id: meta
        run: |
          echo "TAG=${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
          echo "REG=${{ env.REGISTRY }}" >> $GITHUB_OUTPUT
