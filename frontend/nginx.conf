# week03/example-1/frontend/nginx.conf
# Simple Nginx configuration to serve the static frontend files.

server {
    # Listen on port 80, the default HTTP port inside the container.
    # This port will be mapped to a host port (e.g., 3000) by Docker Compose.
    listen 80;
    server_name localhost; # Can be an IP address or hostname

    # Set the root directory for serving files to where the frontend code is copied in the Dockerfile.
    root /usr/share/nginx/html;

    # Specify index files to try when a directory is requested (e.g., when accessing '/')
    index index.html index.htm;

    # Configure how Nginx should handle requests for files that don't exist.
    # try_files: tries to serve files based on the given URIs.
    # $uri: attempts to serve the request directly as a file.
    # $uri/: attempts to serve the request as a directory (looks for index.html inside it).
    # =404: if neither of the above are found, return a 404 Not Found error.
    location / {
        try_files $uri $uri/ =404;
    }

    # Optional: Serve backend API from the same domain/port using a proxy (if not using direct localhost:port)
    # This example assumes direct access via localhost:8000 and localhost:8001
    # If you were to use a single Nginx entry point for all services, you'd add:
    # location /api/products/ {
    #     proxy_pass http://product_service:8000; # 'product_service' is the Docker Compose service name
    # }
    # location /api/orders/ {
    #     proxy_pass http://order_service:8000;   # 'order_service' is the Docker Compose service name
    # }
}
