apiVersion: v1
kind: Service
metadata:
  name: product-db-service-w08e1
spec:
  selector: { app: product-db }
  ports:
    - name: pg
      port: 5432
      targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-db-deployment-w08e1
spec:
  replicas: 1
  revisionHistoryLimit: 1
  strategy:
    type: RollingUpdate
    rollingUpdate: { maxUnavailable: 1, maxSurge: 0 }
  selector:
    matchLabels: { app: product-db }
  template:
    metadata:
      labels: { app: product-db }
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: postgres
          image: postgres:15-alpine
          imagePullPolicy: IfNotPresent
          env:
            - name: POSTGRES_DB
              valueFrom: { configMapKeyRef: { name: ecomm-config-w08e1, key: PRODUCTS_DB_NAME } }
            - name: POSTGRES_USER
              valueFrom: { secretKeyRef: { name: ecomm-secrets-w08e1, key: POSTGRES_USER } }
            - name: POSTGRES_PASSWORD
              valueFrom: { secretKeyRef: { name: ecomm-secrets-w08e1, key: POSTGRES_PASSWORD } }
          ports: [{ containerPort: 5432 }]
          readinessProbe:
            exec: { command: ["sh","-c","pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"] }
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 6
          livenessProbe:
            exec: { command: ["sh","-c","pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"] }
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 6
          resources:
            requests: { cpu: "50m", memory: "128Mi" }
            limits:   { cpu: "250m", memory: "512Mi" }
